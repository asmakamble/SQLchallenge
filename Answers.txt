Answer 1: select rentals.customer_name,
        count(distinct rentals.activity) as distinct_activities
from rentals
group by rentals.customer_name
having count(distinct rentals.activity) > 1;

-------------------------------------------------
Answer 2: 
select gifts.gift_name, gifts.weight_kg
from gifts
where gifts.weight_kg>1;

---------------------------------------------

Answer 3: 
select 
        candy_name, 
        candy_category,
        calories,
        rank() over (partition by candy_category order by calories DESC) as rank_in_category
from candy_nutrition
order by 
candy_category,
rank_in_category;
--------------------------------------------------------------

Answer 4:

select region,
        avg(snowfall_inches) as average_snowfall
from ski_resorts
left join
snowfall on ski_resorts.resort_id = snowfall.resort_id
group by region
order by average_snowfall desc;


----------------------------------------------------------------
Answer 5: 

select beach_name,
     expected_temperature_c 
from beach_temperature_predictions
where expected_temperature_c > 30 and date = '2024-12-25';

--------------------------------------------

Answer 6: 
select pb.bear_id, 
    pb.bear_name,
    sum(t.distance_km) as total_distance_traveled
from polar_bears pb
left join
tracking t on pb.bear_id = t.bear_id
where 
    strftime('%Y', t.date) = '2024' AND strftime('%m', t.date) = 12
group by 
    pb.bear_id, pb.bear_name
order by total_distance_traveled desc
limit 3;


-----------------------------------------------------

Answer 7: 

select vendor_name,
sum(sales.price_per_unit*sales.quantity_sold) as total_revenue
from vendors
left join
sales on vendors.vendor_id = sales.vendor_id
group by vendor_name
order by total_revenue DESC
limit 2;
------------------------------------------------------------
Answer 8: 

select gifts.gift_name, gifts.weight_kg
from gifts
where recipient_type = 'good';

--------------------------------------------------

Answer 9:  

WITH RankedDishes AS (
    SELECT 
        m.dish_name,
        e.event_name,
        (m.calories * 1.0 / m.weight_g) AS calorie_density,
        ROW_NUMBER() OVER (PARTITION BY e.event_id ORDER BY (m.calories * 1.0 / m.weight_g) DESC) AS rank
    FROM 
        menu m
    JOIN 
        events e
    ON 
        m.event_id = e.event_id
)
SELECT 
    dish_name,
    event_name,
    calorie_density
FROM 
    RankedDishes
WHERE 
    rank <= 3
ORDER BY 
    event_name,
    calorie_density DESC;

---------------------------------------------------------------

Answer 10:
select 
    friend_name,
    count(*) as total_resolutions,
    sum(is_completed) as is_completed_resolutions,
    round((sum(is_completed) * 100 / count(*)),2) as success_percentage,
    case
        when (sum(is_completed) * 100 / count(*)) > 75 then 'Green'
        when (sum(is_completed) * 100 / count(*)) between 50 and 75 then 'Yellow'
        else 'Red'
    end as  success_category
from resolutions
group by friend_name
order by friend_name;

------------------------------------------------------------------

Answer 11:
select 
    name, 
    birthday
from 
    family_members
where 
    strftime('%m', birthday) = '12'
    and strftime('%Y',birthday) = '2024';

-----------------------------------------------------------

Answer 12: 

WITH RankedGlobes AS (
    SELECT 
        snow_globes.globe_name,
        COUNT(figurines.figurine_id) AS number_of_figures,
        snow_globes.material,
        RANK() OVER (ORDER BY COUNT(figurines.figurine_id) DESC) AS rank
    FROM 
        snow_globes
    LEFT JOIN 
        figurines ON snow_globes.globe_id = figurines.globe_id
    GROUP BY 
        snow_globes.globe_name, snow_globes.material
)
SELECT 
    globe_name, 
    number_of_figures, 
    material
FROM 
    RankedGlobes
WHERE 
    rank <= 3
ORDER BY 
    rank;

------------------------------------------------------

Answer 13: 
select recipient,
sum(weight_kg) as total_weight_kg
from gifts
group by recipient;


------------------------------------------------------
Answer 14: 

select resort_name, snowfall_inches
from snowfall
where snowfall_inches > 50;

---------------------------------------------

Answer 15:
WITH ParentChildCount AS (
    SELECT 
        fm.name AS parent_name,
        COUNT(pcr.child_id) AS total_children
    FROM 
        family_members fm
    LEFT JOIN 
        parent_child_relationships pcr ON fm.member_id = pcr.parent_id
    GROUP BY 
        fm.name
)
SELECT 
    parent_name, 
    total_children
FROM 
    ParentChildCount
ORDER BY 
    total_children DESC
LIMIT 3;


------------------------------------------------------------

Answer 16: 
select category,
        sum(quantity_sold*price_per_unit) as revenue
from candy_sales
group by category
order by revenue desc;

-----------------------------------------------------------------

Answer 17:

SELECT prank_name, location
FROM grinch_pranks
WHERE difficulty IN ('Advanced', 'Expert')
ORDER BY location DESC, prank_name DESC;

-------------------------------------------------------


Answer 18:

select activity_name, 
    avg(rating) as average_rating
from activities
left join activity_ratings on activities.activity_id = activity_ratings.activity_id
group by activity_name
order by average_rating desc
limit 2;

---------------------------------------------------------------

Answer 19: 
select 
    bear_name, 
    max(food_weight_kg) as biggest_meal_kg
from polar_bears
left join meal_log on polar_bears.bear_id = meal_log.bear_id
where strftime('%Y',date) = '2024' and strftime('%m',date) = '12'
group by bear_name
order by biggest_meal_kg desc;
----------------------------------------------------------------
Answer 20: 

select vendor_name
from vendors
left join item_prices on vendors.vendor_id = item_prices.vendor_id
where price_usd < 10
group by vendor_name;

----------------------------------------------------------------------

Answer 21: 

with total_weight_cte as(
    select 
        sum(weight_kg) as total_weight
    from gifts
)
select recipient_type, 
   sum(weight_kg) as total_weight,
   round((sum(weight_kg)*100/(select total_weight from total_weight_cte)),2 ) as weight_percentage 
from gifts
group by recipient_type;

--------------------------------------------------

Answer 22: 

select guest_name
from guests
left join
guest_gifts on guests.guest_id = guest_gifts.guest_id
where gift_id is null;


-----------------------------------------------

Answer 23:

select day_of_month,
            weight,
            weight - LAG(weight) over (order by day_of_month)  as weight_changes      
from grinch_weight_log;


---------------------------------------------------------------------

Answer 24:

SELECT 
    delivery_date,
    gifts_delivered,
    SUM(gifts_delivered) OVER (ORDER BY delivery_date) AS cumulative_gifts
FROM 
    deliveries
ORDER BY 
    delivery_date;



